package haveric.recipeManager.flags;

import haveric.recipeManager.tools.Tools;

import org.bukkit.inventory.meta.ItemMeta;


public class FlagItemName extends Flag {
    // Flag definition and documentation

    private static final FlagType TYPE = FlagType.ITEMNAME;
    protected static final String[] A = new String[] {
        "{flag} <text or false>", };

    protected static final String[] D = new String[] {
        "Changes result's display name.",
        "",
        "Supports colors (e.g. <red>, <blue>, &4, &F, etc).",
        "",
        "You can also use these variables:",
        "  {player}         = crafter's name or '(nobody)' if not available",
        "  {playerdisplay}  = crafter's display name or '(nobody)' if not available",
        "  {result}         = the result item name or '(nothing)' if recipe failed.",
        "  {recipename}     = recipe's custom or autogenerated name or '(unknown)' if not available",
        "  {recipetype}     = recipe type or '(unknown)' if not available",
        "  {inventorytype}  = inventory type or '(unknown)' if not available",
        "  {world}          = world name of event location or '(unknown)' if not available",
        "  {x}              = event location's X coord or '(?)' if not available",
        "  {y}              = event location's Y coord or '(?)' if not available",
        "  {z}              = event location's Z coord or '(?)' if not available", };

    protected static final String[] E = new String[] {
        "{flag} <light_purple>Weird Item",
        "{flag} <yellow>{player}'s Sword", };


    // Flag code

    private String name;

    public FlagItemName() {
    }

    public FlagItemName(FlagItemName flag) {
        name = flag.name;
    }

    @Override
    public FlagItemName clone() {
        super.clone();
        return new FlagItemName(this);
    }

    @Override
    public FlagType getType() {
        return TYPE;
    }

    public String getName() {
        return name;
    }

    public void setName(String newName) {
        name = newName;
    }

    @Override
    protected boolean onParse(String value) {
        setName(value);
        return true;
    }

    @Override
    protected void onPrepare(Args a) {
        if (!a.hasResult()) {
            a.addCustomReason("Needs result!");
            return;
        }

        ItemMeta meta = a.result().getItemMeta();

        String displayName;
        if (getName() == null) {
            displayName = null;
        } else {
            displayName = Tools.parseColors(a.parseVariables(getName()), false);
        }
        meta.setDisplayName(displayName);

        a.result().setItemMeta(meta);
    }
}
